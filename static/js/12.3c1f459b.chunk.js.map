{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","scenes/entries/components/ticket-detail/index.tsx"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","__webpack_require__","d","__webpack_exports__","TicketDetail","props","data","nlp2API","ticketNo","ticketCurrency","gameNo","numbers","player","isVerified","isClaimed","matched","prize","createdAt","_nlp2API$status","status","availableVerifications","currentLotteryNo","indexes","dispatch","useContext","InvokerContext","onClaim","invokeScript","NLP2API","getInvokeScript","claim","openInvoker","_objectSpread","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","join","moment","unix","format","concat","Fragment","onClick","type"],"mappings":"2FAAe,SAAAA,EAAAC,EAAAC,EAAAC,GAYf,OAXAD,KAAAD,EACAG,OAAAC,eAAAJ,EAAAC,EAAA,CACAC,QACAG,YAAA,EACAC,cAAA,EACAC,UAAA,IAGAP,EAAAC,GAAAC,EAGAF,EAZAQ,EAAAC,EAAAC,EAAA,sBAAAX,uUCgGeY,UAxEM,SAACC,GAA6B,IACzCC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEZC,EAUEF,EAVFE,SACAC,EASEH,EATFG,eACAC,EAQEJ,EARFI,OACAC,EAOEL,EAPFK,QACAC,EAMEN,EANFM,OACAC,EAKEP,EALFO,WACAC,EAIER,EAJFQ,UACAC,EAGET,EAHFS,QACAC,EAEEV,EAFFU,MACAC,EACEX,EADFW,UAZ+CC,EAcLX,EAAQY,OAA5CC,EAdyCF,EAczCE,uBACAC,EAfyCH,EAcjBI,QACxBD,iBAEAE,EAAaC,qBAAWC,KAAxBF,SACFG,EAAU,SAAClB,GACf,IAAMmB,EAAeC,IAAQC,gBAAgBC,MAAM,CAACtB,IACpDe,EAASQ,iWAATC,CAAA,GACKL,KAIP,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIzB,GACJuB,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAI3B,GACJyB,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAIvB,GACJqB,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIxB,EAAQ0B,KAAK,MACjBJ,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,aAAKG,IAAOC,KAAKtB,GAAWuB,OAAO,0BACnCP,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SACGtB,EAAU,WAAA4B,OACI1B,EADJ,YAEPM,IAAqBX,EACrB,UACA,aAELK,EAAU,EACTD,EACEmB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACET,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,YAAAM,OAAOzB,EAAP,KAAAyB,OAAgBhC,KAGlBwB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACET,EAAAC,EAAAC,cAAA,mBACCf,EACCa,EAAAC,EAAAC,cAAA,UACEQ,QAAS,kBAAMjB,EAAQlB,IACvBoC,KAAK,SACLR,UAAU,qBAHZ,uBAQAH,EAAAC,EAAAC,cAAA,uDAIJ","file":"static/js/12.3c1f459b.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import React, { useContext } from \"react\";\nimport moment from \"moment\";\nimport { NLP2API } from \"@ftw-js/api\";\nimport { InvokerContext } from \"@neo-react/invoker\";\n\nexport interface Ticket {\n  gameNo: number;\n  ticketNo: number;\n  ticketCurrency: string;\n  player: string;\n  numbers: [number];\n  isVerified: boolean;\n  matched: number;\n  isClaimed: boolean;\n  prize: number;\n  createdAt: number;\n  referral: string;\n}\n\ninterface TicketDetailProps {\n  data: Ticket;\n  nlp2API: NLP2API;\n}\n\nconst TicketDetail = (props: TicketDetailProps) => {\n  const { data, nlp2API } = props;\n  const {\n    ticketNo,\n    ticketCurrency,\n    gameNo,\n    numbers,\n    player,\n    isVerified,\n    isClaimed,\n    matched,\n    prize,\n    createdAt,\n  } = data;\n  const { availableVerifications, indexes } = nlp2API.status;\n  const { currentLotteryNo } = indexes;\n\n  const { dispatch } = useContext(InvokerContext);\n  const onClaim = (ticketNo: number): void => {\n    const invokeScript = NLP2API.getInvokeScript.claim([ticketNo]);\n    dispatch.openInvoker({\n      ...invokeScript,\n    });\n  };\n\n  return (\n    <div className=\"content\">\n      <h6>Game no</h6>\n      <p>{gameNo}</p>\n      <h6>Ticket no</h6>\n      <p>{ticketNo}</p>\n      <h6>Player</h6>\n      <p>{player}</p>\n      <h6>Numbers</h6>\n      <p>{numbers.join(\",\")}</p>\n      <h6>Created at</h6>\n      <p> {moment.unix(createdAt).format(\"YYYY-MM-DD hh:mm:ss A\")}</p>\n      <h6>Result</h6>\n      <p>\n        {isVerified\n          ? `Matched ${matched} numbers`\n          : currentLotteryNo === gameNo\n          ? \"Playing\"\n          : \"Verifying\"}\n      </p>\n      {matched > 1 ? (\n        isClaimed ? (\n          <>\n            <h6>Prize</h6>\n            <p>{`${prize} ${ticketCurrency}`}</p>\n          </>\n        ) : (\n          <>\n            <h6>Claim</h6>\n            {availableVerifications ? (\n              <button\n                onClick={() => onClaim(ticketNo)}\n                type=\"button\"\n                className=\"button is-success\"\n              >\n                Claim winning prize\n              </button>\n            ) : (\n              <p>Smart contract is verifying other tickets</p>\n            )}\n          </>\n        )\n      ) : null}\n    </div>\n  );\n};\n\nexport default TicketDetail;\n"],"sourceRoot":""}